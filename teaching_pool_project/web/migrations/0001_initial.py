# Generated by Django 2.2.2 on 2019-06-24 12:34

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('sciper', models.IntegerField(blank=True, default=None, null=True)),
                ('role', models.CharField(choices=[('teacher', 'teacher'), ('teaching assistant', 'teaching assistant')], default='teacher', max_length=255)),
                ('canTeachInFrench', models.BooleanField(blank=True, default=None, null=True)),
                ('canTeachInEnglish', models.BooleanField(blank=True, default=None, null=True)),
            ],
            options={
                'ordering': ('last_name', 'first_name'),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=9)),
                ('term', models.CharField(max_length=255)),
                ('code', models.CharField(max_length=255)),
                ('subject', models.CharField(max_length=255)),
                ('section', models.CharField(max_length=255)),
                ('numberOfStudents', models.IntegerField()),
                ('calculatedNumberOfTAs', models.IntegerField(blank=True, default=None, null=True)),
                ('requestedNumberOfTAs', models.IntegerField(blank=True, default=None, null=True)),
                ('approvedNumberOfTAs', models.IntegerField(blank=True, default=None, null=True)),
                ('taughtInFrench', models.BooleanField(default=True)),
                ('taughtInEnglish', models.BooleanField(default=False)),
                ('taughtInGerman', models.BooleanField(default=False)),
                ('has_course', models.BooleanField(default=False)),
                ('has_exercises', models.BooleanField(default=False)),
                ('has_project', models.BooleanField(default=False)),
                ('has_practical_work', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('year', 'term', 'code'),
            },
        ),
        migrations.CreateModel(
            name='Interests',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('interestedPersons', models.ManyToManyField(through='web.Interests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Teaching',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('isLeadTeacher', models.BooleanField(blank=True, default=None, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Course')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NumberOfTAUpdateRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('openedAt', models.DateTimeField(default=django.utils.timezone.now)),
                ('requestedNumberOfTAs', models.IntegerField()),
                ('status', models.CharField(default='Pending', max_length=255)),
                ('requestReason', models.TextField(blank=True, default=None, null=True)),
                ('closedAt', models.DateTimeField(blank=True, default=None, null=True)),
                ('decisionReason', models.TextField(blank=True, default=None, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Course')),
                ('decidedBy', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='decidedBy', to=settings.AUTH_USER_MODEL)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requester', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='interests',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Topic'),
        ),
        migrations.AddField(
            model_name='course',
            name='teachers',
            field=models.ManyToManyField(through='web.Teaching', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=9)),
                ('availability', models.CharField(choices=[('Available', 'Available'), ('Unavailable', 'Unavailable')], default='Available', max_length=255)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Applications',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('openedAt', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(default='Pending', max_length=255)),
                ('closedAt', models.DateTimeField(blank=True, default=None, null=True)),
                ('decisionReason', models.TextField(blank=True, default=None, null=True)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applicant', to=settings.AUTH_USER_MODEL)),
                ('closedBy', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Course')),
            ],
        ),
        migrations.AddField(
            model_name='person',
            name='courses',
            field=models.ManyToManyField(through='web.Teaching', to='web.Course'),
        ),
        migrations.AddField(
            model_name='person',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='person',
            name='topics',
            field=models.ManyToManyField(through='web.Interests', to='web.Topic'),
        ),
        migrations.AddField(
            model_name='person',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='teaching',
            index=models.Index(fields=['person'], name='web_teachin_person__ef1a7a_idx'),
        ),
        migrations.AddIndex(
            model_name='teaching',
            index=models.Index(fields=['course'], name='web_teachin_course__35ac0b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='teaching',
            unique_together={('person', 'course')},
        ),
        migrations.AddIndex(
            model_name='numberoftaupdaterequest',
            index=models.Index(fields=['requester'], name='web_numbero_request_5ed5fa_idx'),
        ),
        migrations.AddIndex(
            model_name='numberoftaupdaterequest',
            index=models.Index(fields=['course'], name='web_numbero_course__a48ebd_idx'),
        ),
        migrations.AddIndex(
            model_name='numberoftaupdaterequest',
            index=models.Index(fields=['status'], name='web_numbero_status_7a9a98_idx'),
        ),
        migrations.AddIndex(
            model_name='interests',
            index=models.Index(fields=['person'], name='web_interes_person__0f8833_idx'),
        ),
        migrations.AddIndex(
            model_name='interests',
            index=models.Index(fields=['topic'], name='web_interes_topic_i_dd4aa0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='interests',
            unique_together={('person', 'topic')},
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['year'], name='year_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['code'], name='code_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['section'], name='section_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['taughtInFrench'], name='french_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['taughtInFrench'], name='english_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='course',
            unique_together={('year', 'term', 'code')},
        ),
        migrations.AlterIndexTogether(
            name='course',
            index_together={('year', 'term'), ('year', 'term', 'code')},
        ),
        migrations.AddIndex(
            model_name='availability',
            index=models.Index(fields=['year'], name='web_availab_year_e26324_idx'),
        ),
        migrations.AddIndex(
            model_name='availability',
            index=models.Index(fields=['person'], name='web_availab_person__2f5310_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='availability',
            unique_together={('year', 'person')},
        ),
        migrations.AlterIndexTogether(
            name='availability',
            index_together={('year', 'person')},
        ),
        migrations.AddIndex(
            model_name='applications',
            index=models.Index(fields=['applicant'], name='web_applica_applica_5662b3_idx'),
        ),
        migrations.AddIndex(
            model_name='applications',
            index=models.Index(fields=['course'], name='web_applica_course__0cd6ab_idx'),
        ),
        migrations.AddIndex(
            model_name='applications',
            index=models.Index(fields=['status'], name='web_applica_status_731f1f_idx'),
        ),
    ]
